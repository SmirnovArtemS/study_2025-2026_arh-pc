---
## Author
author:
  name: Смирнов Артём Сергеевич, НПИбд-02-25
  degrees: DSc
  orcid: 0000-0002-0877-7063
  email: 1032252364@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Отчет по лабораторной работе №4"
subtitle: " Создание и процесс обработки программ на языке ассемблера NASM"
license: "CC BY"
---

# Цель работы

Освоение процедуры компиляции и сборки программ, написанных на ассемблере NASM.

# Задание

1. В каталоге ~/work/arch-pc/lab04 с помощью команды cp создайте копию файла hello.asm с именем lab4.asm

2. С помощью любого текстового редактора внесите изменения в текст программы в файле lab4.asm так, чтобы вместо Hello world! на экран выводилась строка с вашими фамилией и именем.

3. Оттранслируйте полученный текст программы lab4.asm в объектный файл. Выполните компоновку объектного файла и запустите получившийся исполняемый файл.

4. Скопируйте файлы hello.asm и lab4.asm в Ваш локальный репозиторий в каталог ~/work/study/2023-2024/"Архитектура компьютера"/arch-pc/labs/lab04/. Загрузите файлы на Github.

# Выполнение лабораторной работы

## Порядок выполнения лабораторной работы

### Программа Hello world!
С помощью mkdir создаем директорию arch-pc/lab04 в папке work, после с помощь команды cd переходим в созданную директорию и с помощью команды touch создаем файл hello.asm (рис 3.1)

![Создание директории и файла hello.asm в ней](image/1.png){#fig-001 width=90%}

Открываем созданный нами файл при помощи текстового редактора gedit (рис 3.2)

![Открытие файла hello.asm](image/2.png){#fig-002 width=90%}

Вводим необходимый текст в этот файл (рис 3.3)

![Вводим необходимый текст](image/3.png){#fig-003 width=90%}

### Транслятор NASM
Компилируем hello.asm в код с помощью операнта NASM, далее проверяем правильность компиляции с помощью команды ls. Наличие файла hello.o указывает на корректность написанного в файле hello.asm кода (рис 3.4)

![Компиляция hello.asm и последующая проверка корректности создания файла hello.o](image/4.png){#fig-004 width=90%}

### Расширенный синтаксис командной строки NASM

Компилируем исходный файл hello.asm в obj.o, одновременно создаем файл list.lst. Проверяем правильность созданных файлов с помощью ls (рис 3.5)

![Компиляция исходного файла в obj.o с файлом листинга list.lst](image/5.png){#fig-005 width=90%}

## Компоновщик LD

Передаем объектный файл (hello.o) на обработку компоновщику используя ld. С помощью ls проверяем, создался ли файл hello (рис 3.6).

![Компановка hello.o и проверка правильности создания файлов](image/6.png){#fig-006 width=90%}

С помощью команды "ld -m elf_i386 obj.o -o main" компонуем файл obj.o (рис 3.7). В конце строки команды написано название создаваемого файла - main. После проверяем корректность создания файла main с помощью ls (рис 7).

![Компиляция файла obj.o и проверка на наличие файла в директории](image/7.png){#fig-007 width=90%}

### Запуск искомого файла

Запускаем файл hello (рис 3.8)

![Запуск файла hello](image/8.png){#fig-009 width=90%}

## Задание для самостоятельной работы

1. Создаем копию файла hello.asm с названием lab4.asm в нашей директории, используя оперант cp. С помощью ls проверяем корректность выполнения команды (рис 3.9)

![Создание копии файла hello.asm](image/9.png){#fig-0010 width=90%}

2. Используя текстового редактора gedit, редактируем файл lab4.asm, заменяя строчку Hello World! Фамилию и Имя (рис 3.10)

![Редактирование файла lab4.asm ипользуя gedit и проверяем правильность выполнения](image/10.png){#fig-0011 width=90%}

3. Переводим этот файл в объектный файл с помощью nasm. Компонуем объектный файл с помощью ld, далее запускаем файл (рис 3.11)

![Преобрзование файла в объектный файл, компоновка полученного файла и запуск его](image/11.png){#fig-0012 width=90%}

4. С помощью cp копируем файлы hello.asm и lab4.asm в локальный репозиторий в директорию ~/work/study/2025-2026/"Архитектура компьютера"/arch-pc/labs/lab04/. Потом проверяем корректность выполнения команд (рис 3.12)

![Копирование файлов hello.asm и lab4.asm в необходимый локальный репозиторий и проверка корректности копирования](image/12.png){#fig-0013 width=90%}

Загружаем файлы на GitHub (рис 3.13)

![Загрузка файлов на GitHub](image/13.png){#fig-0015 width=90%}

# Выводы

Я освоил процедуры компиляции и сборки программ, написанных на ассемблере NASM.

# Список литературы{.unnumbered}

1. GDB: The GNU Project Debugger. — URL: https://www.gnu.org/software/gdb/.
2. GNU Bash Manual. — 2016. — URL: https://www.gnu.org/software/bash/manual/.
3. Midnight Commander Development Center. — 2021. — URL: https://midnight-commander.
org/.
4. NASM Assembly Language Tutorials. — 2021. — URL: https://asmtutor.com/.
5. Newham C. Learning the bash Shell: Unix Shell Programming. — O’Reilly Media, 2005. —
354 с. — (In a Nutshell). — ISBN 0596009658. — URL: http://www.amazon.com/Learningbash-Shell-Programming-Nutshell/dp/0596009658.
6. Robbins A. Bash Pocket Reference. — O’Reilly Media, 2016. — 156 с. — ISBN 978-1491941591.
7. The NASM documentation. — 2021. — URL: https://www.nasm.us/docs.php.
8. Zarrelli G. Mastering Bash. — Packt Publishing, 2017. — 502 с. — ISBN 9781784396879.
9. Колдаев В. Д., Лупин С. А. Архитектура ЭВМ. — М. : Форум, 2018.
10. Куляс О. Л., Никитин К. А. Курс программирования на ASSEMBLER. — М. : Солон-Пресс,
2017.
11. Новожилов О. П. Архитектура ЭВМ и систем. — М. : Юрайт, 2016.
12. Расширенный ассемблер: NASM. — 2021. — URL: https://www.opennet.ru/docs/RUS/nasm/.
13. Робачевский А., Немнюгин С., Стесик О. Операционная система UNIX. — 2-е изд. — БХВПетербург, 2010. — 656 с. — ISBN 978-5-94157-538-1.
14. Столяров А. Программирование на языке ассемблера NASM для ОС Unix. — 2-е изд. —
М. : МАКС Пресс, 2011. — URL: http://www.stolyarov.info/books/asm_unix.
15. Таненбаум Э. Архитектура компьютера. — 6-е изд. — СПб. : Питер, 2013. — 874 с. —
(Классика Computer Science).
16. Таненбаум Э., Бос Х. Современные операционные системы. — 4-е изд. — СПб. : Питер,
2015. — 1120 с. — (Классика Computer Science).

::: {#refs}
:::
